// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/batazor/fsme/admin/server/models"
)

// SendEventFSMOKCode is the HTTP code returned for type SendEventFSMOK
const SendEventFSMOKCode int = 200

/*SendEventFSMOK OK

swagger:response sendEventFSMOK
*/
type SendEventFSMOK struct {

	/*
	  In: Body
	*/
	Payload *models.Event `json:"body,omitempty"`
}

// NewSendEventFSMOK creates SendEventFSMOK with default headers values
func NewSendEventFSMOK() *SendEventFSMOK {

	return &SendEventFSMOK{}
}

// WithPayload adds the payload to the send event f s m o k response
func (o *SendEventFSMOK) WithPayload(payload *models.Event) *SendEventFSMOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send event f s m o k response
func (o *SendEventFSMOK) SetPayload(payload *models.Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendEventFSMOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*SendEventFSMDefault error

swagger:response sendEventFSMDefault
*/
type SendEventFSMDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSendEventFSMDefault creates SendEventFSMDefault with default headers values
func NewSendEventFSMDefault(code int) *SendEventFSMDefault {
	if code <= 0 {
		code = 500
	}

	return &SendEventFSMDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the send event f s m default response
func (o *SendEventFSMDefault) WithStatusCode(code int) *SendEventFSMDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the send event f s m default response
func (o *SendEventFSMDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the send event f s m default response
func (o *SendEventFSMDefault) WithPayload(payload *models.Error) *SendEventFSMDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send event f s m default response
func (o *SendEventFSMDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendEventFSMDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
